openapi: 3.0.2
info:
  title: Microcks API v1.0
  description: 'API offered by Microcks, the mock and testing platform for API and microservices (microcks.github.io)'
  contact:
    name: Laurent Broudoux
    url: 'https://github.com/lbroudoux'
    email: laurent.broudoux@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  version: 1.0.0
servers:
  - url: 'http://microcks.example.com/api'
    description: ''
paths:
  /services:
    summary: This path operations deal with Services
    get:
      tags:
        - mock
      summary: Get Services and APIs
      operationId: GetServices
      parameters:
        - name: page
          in: query
          description: Page of Services to retrieve (starts at and defaults to 0)
          schema:
            type: integer
        - name: size
          in: query
          description: Size of a page. Maximum number of Services to include in a response (defaults to 20)
          schema:
            type: integer
      responses:
        '200':
          description: List of found Services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      security:
        - jwt-bearer:
            - user
  /tests:
    post:
      tags:
        - test
      summary: Create a new Test
      operationId: CreateTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
        required: true
      responses:
        '201':
          description: Created TestResult (empty shell cause tests are executed asynchronously)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
      security:
        - jwt-bearer:
            - user
  /services/count:
    get:
      tags:
        - mock
      summary: Get the Services counter
      operationId: GetServicesCounter
      responses:
        '200':
          description: Number of Services in datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
      security:
        - jwt-bearer:
            - user
  /services/search:
    get:
      tags:
        - mock
      summary: Search for Services and APIs
      operationId: SearchServices
      parameters:
        - name: name
          in: query
          description: Name like criterion for query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of found Services (filtered according search criteria)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
      security:
        - jwt-bearer:
            - user
  /jobs:
    summary: This path operations deal with ImportJobs
    get:
      tags:
        - job
      summary: Get ImportJobs
      description: Retrieve a list of ImportJobs
      operationId: GetImportJobs
      parameters:
        - name: page
          in: query
          description: Page of ImportJobs to retrieve (starts at and defaults to 0)
          schema:
            type: integer
        - name: size
          in: query
          description: Size of a page. Maximum number of ImportJobs to include in a response (defaults to 20)
          schema:
            type: integer
        - name: name
          in: query
          description: Name like criterion for query
          schema:
            type: string
      responses:
        '200':
          description: List of found ImportJobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImportJob'
      security:
        - jwt-bearer:
            - user
    post:
      tags:
        - job
      summary: Create ImportJob
      description: Create a new ImportJob
      operationId: CreateImportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJob'
        required: true
      responses:
        '201':
          description: Created ImportJob
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      security:
        - jwt-bearer:
            - user
  '/jobs/{id}':
    summary: This path or subpaths operations deal with specific ImportJob having given id
    get:
      tags:
        - job
      summary: Get ImportJob
      description: Retrieve an ImportJob using its identifier
      responses:
        '200':
          description: Found ImportJob
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      security:
        - jwt-bearer:
            - user
    post:
      tags:
        - job
      summary: Update ImportJob
      description: Update an ImportJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportJob'
        required: true
      responses:
        '200':
          description: Updated ImportJob
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
    delete:
      tags:
        - job
      summary: Delete ImportJob
      description: Delete an ImportJob
      operationId: DeleteImportJob
      responses:
        '200':
          description: ImportJob deleted
          content:
            application/json: {}
      security:
        - jwt-bearer:
            - 'user:identity'
            - admin
    parameters:
      - name: id
        in: path
        description: Unique identifier of ImportJob to manage
        required: true
        schema:
          type: string
  '/jobs/{id}/activate':
    put:
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - job
      summary: Activate an ImportJob
      description: 'Make an ImportJob active, so that it is executed'
      operationId: ActivateImportJob
      responses:
        '200':
          description: ImportJob is activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      security:
        - jwt-bearer:
            - user
  '/jobs/{id}/start':
    put:
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - job
      summary: Start an ImportJob
      description: Starting an ImportJob forces it to immediatly import mock definitions
      operationId: StartImportJob
      responses:
        '200':
          description: Started ImportJob
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      security:
        - jwt-bearer:
            - user
  '/jobs/{id}/stop':
    put:
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      tags:
        - job
      summary: Stop an ImportJob
      description: 'Stopping an ImportJob desactivate it, so that it won''t execute at next schedule'
      operationId: StopImportJob
      responses:
        '200':
          description: Stopped ImportJob
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJob'
      security:
        - jwt-bearer:
            - user
  '/services/{id}':
    get:
      tags:
        - mock
      summary: Get Service
      operationId: GetService
      responses:
        '200':
          description: Requested Service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      security:
        - jwt-bearer:
            - user
    delete:
      tags:
        - mock
      summary: Delete Service
      description: Delete a Service
      operationId: DeleteService
      responses:
        '200':
          description: Service has been deleted
      security:
        - jwt-bearer:
            - admin
    parameters:
      - name: id
        in: path
        description: Unique identifier of Service to managed
        required: true
        schema:
          type: string
  /artifact/upload:
    summary: 'Deals with artifacts (SOAP UI project, Postman collection or OpenAPI Specification) to be imported by Microcks.'
    post:
      tags:
        - job
      summary: Upload an artifact
      description: 'Uploads an artifact (SOAP UI project, Postman collection or OpenAPI Specification) to be imported by Microcks.'
      operationId: uploadArtifact
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ArtifactUpload'
            examples:
              Artifact upload:
                value: |
                  POST /api/artifact/upload HTTP/1.1
                  Host: microcks
                  User-Agent: curl/7.54.0
                  Accept: */*
                  Authorization: Bearer <REDACTED>
                  Content-Length: 2743
                  Expect: 100-continue
                  Content-Type: multipart/form-data; boundary=------------------------8af8cbb56dd4bde0

                  --------------------------8af8cbb56dd4bde0
                  Content-Disposition: form-data; name="file"; filename="github.json"
                  Content-Type: application/octet-stream

                  THE ARTIFACT HERE

                  --------------------------8af8cbb56dd4bde0--
        required: true
      responses:
        '201':
          description: Artifact was imported and Service found
          content:
            text/plain:
              schema:
                type: string
        '204':
          description: No file attribute found in uploaded data
        '400':
          description: Artifact content is invalid and not understood
          content:
            text/plain:
              schema:
                type: string
  /jobs/count:
    summary: Count ImportJobs
    get:
      tags:
        - job
      summary: Get the ImportJobs counter
      operationId: GetImportJobCounter
      responses:
        '200':
          description: Number of ImportJobs in datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
      security:
        - jwt-bearer:
            - user
  /secrets:
    summary: This path operations deal with Secrets
    get:
      tags:
        - config
      parameters:
        - name: page
          in: query
          description: Page of Secrets to retrieve (starts at and defaults to 0)
          required: false
          schema:
            type: integer
        - name: size
          in: query
          description: Size of a page. Maximum number of Secrets to include in a response (defaults to 20)
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: List of found Secrets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Secret'
      security:
        - jwt-bearer:
            - user
    post:
      tags:
        - config
      summary: Create a new Secret
      operationId: CreateSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Secret'
      responses:
        '201':
          description: Created Secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      security:
        - jwt-bearer:
            - admin
  '/secrets/{id}':
    get:
      tags:
        - config
      summary: Get Secret
      description: Retrieve a Secret
      operationId: GetSecret
      responses:
        '200':
          description: Found Secret
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
      security:
        - jwt-bearer:
            - admin
    put:
      tags:
        - config
      summary: Update Secret
      description: Update a Secret
      operationId: UpdateSecret
      responses:
        '200':
          description: Updated Secret
      security:
        - jwt-bearer:
            - admin
    delete:
      tags:
        - config
      summary: Delete Secret
      description: Delete a Secret
      operationId: DeleteSecret
      responses:
        '200':
          description: Secret has been deleted
      security:
        - jwt-bearer:
            - admin
    parameters:
      - name: id
        in: path
        description: Unique identifier of Secret to manage
        required: true
        schema:
          type: string
  /secrets/count:
    get:
      tags:
        - config
      summary: Get the Secrets counter
      operationId: GetSecretsCounter
      responses:
        '200':
          description: Number of Secrets in datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
      security:
        - jwt-bearer:
            - user
  '/tests/service/{serviceId}':
    get:
      tags:
        - test
      summary: Get TestResults by Service
      operationId: GetTestResultsByService
      responses:
        '200':
          description: List of TestResults for the Service having the requested id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TestResult'
      security:
        - jwt-bearer:
            - user
    parameters:
      - name: serviceId
        in: path
        description: Unique identifier of Service to manage TestResults for
        required: true
        schema:
          type: string
  '/tests/service/{serviceId}/count':
    get:
      tags:
        - test
      summary: Get the TestResults for Service counter
      operationId: GetTestResultsByServiceCounter
      responses:
        '200':
          description: Number of TestResults for this Service in datastore
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Counter'
      security:
        - jwt-bearer:
            - user
    parameters:
      - name: serviceId
        in: path
        description: Unique identifier of Service to manage TestResults for
        required: true
        schema:
          type: string
  '/tests/{id}':
    get:
      tags:
        - test
      summary: Get TestResult
      description: ''
      operationId: GetTestResult
      responses:
        '200':
          description: Requested TestResult
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
      security:
        - jwt-bearer:
            - user
    parameters:
      - name: id
        in: path
        description: Unique identifier of TestResult to manage
        required: true
        schema:
          type: string
  '/tests/{id}/messages/{testCaseId}':
    get:
      tags:
        - test
      summary: Get messages for TestCase
      operationId: GetMessagesByTestCase
      responses:
        '200':
          description: List of request and response messages for this TestCase
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RequestResponsePair'
      security:
        - jwt-bearer:
            - user
    parameters:
      - name: id
        in: path
        description: Unique identifier of TestResult to manage
        required: true
        schema:
          type: string
      - name: testCaseId
        in: path
        description: Unique identifier of TetsCaseResult to manage
        required: true
        schema:
          type: string
  '/tests/{id}/testCaseResult':
    post:
      tags:
        - test
      summary: Report and create a new TestCaseResult
      description: Report a TestCaseResult (typically used by a Test runner)
      operationId: ReportTestCaseResult
      requestBody:
        description: TestCase return wrapper object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestCaseReturnDTO'
        required: true
      responses:
        '200':
          description: TestCaseResult is reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestCaseResult'
    parameters:
      - name: id
        in: path
        description: Unique identifier of TestResult to manage
        required: true
        schema:
          type: string
  /keycloak/config:
    summary: Keycloak Authentification configuration
    get:
      tags:
        - config
      summary: Get authentification configuration
      operationId: GetKeycloakConfig
      responses:
        '200':
          description: Get current configuration
          content:
            application/json: {}
components:
  schemas:
    TestCaseResult:
      description: Companion objects for TestResult. Each TestCaseResult correspond to a particuliar service operation / action reference by the operationName field. TestCaseResults owns a collection of TestStepResults (one for every request associated to service operation / action).
      required:
        - success
        - elapsedTime
        - operationName
      properties:
        success:
          description: Flag telling if test case is a success
          type: boolean
        elapsedTime:
          description: Elapsed time in milliseconds since the test case beginning
          type: number
        operationName:
          description: Name of operation this test case is bound to
          type: string
        testStepResults:
          description: Test steps associated to this test case
          type: array
          items:
            $ref: '#/components/schemas/TestStepResult'
    TestRunnerType:
      description: Type of test strategy (different strategies are implemented by different runners)
      type: array
      items:
        enum:
          - HTTP
          - SOAP_HTTP
          - SOAP_UI
          - POSTMAN
          - OPEN_API_SCHEMA
        type: string
    Service:
      description: Represents a Service or API definition as registred into Microcks repository
      required:
        - name
        - version
        - type
      properties:
        id:
          description: Unique identifier for this Service or API
          type: string
        name:
          description: Distinct name for this Service or API (maybe shared among many versions)
          type: string
        version:
          description: Distinct version for a named Service or API
          type: string
        XmlNS:
          description: Associated Xml Namespace in case of Xml based Service
          type: string
        type:
          description: Service or API Type
          enum:
            - REST
            - SOAP_HTTP
            - GENERIC_REST
        operations:
          description: Set of Operations for Service or API
          type: array
          items:
            $ref: '#/components/schemas/Operation'
    TestRequest:
      description: Test request is a minimalist wrapper for requesting the launch of a new test
      required:
        - serviceId
        - testEndpoint
        - runnerType
      properties:
        serviceId:
          description: Unique identifier of service to test
          type: string
        testEndpoint:
          description: Endpoint to test for this service
          type: string
        runnerType:
          $ref: '#/components/schemas/TestRunnerType'
          description: Runner used for this test
    ImportJob:
      description: An ImportJob allow defining a repository artifact to poll for discovering Services and APIs mocks and tests
      required:
        - name
        - repositoryUrl
      properties:
        id:
          description: Unique identifier of ImportJob
          type: string
        name:
          description: Unique distinct name of this ImportJob
          type: string
        repositoryUrl:
          description: URL of mocks and tests repository artifact
          type: string
        repositoryDisableSSLValidation:
          description: Wether to disable SSL certificate verification when checking repository
          type: boolean
        frequency:
          description: Reserved for future usage
          type: string
        createdDate:
          format: date-time
          description: Creation date for this ImportJob
          type: string
        lastImportDate:
          format: date-time
          description: Date last import was done
          type: string
        lastImportError:
          description: Error message of last import (if any)
          type: string
        active:
          description: Wether this ImportJob is active (ie. scheduled for execution)
          type: boolean
        etag:
          description: Etag of repository URL during previous import. Is used for not re-importing if no recent changes
          type: string
        serviceRefs:
          description: References of Services discovered when checking repository
          type: array
          items:
            $ref: '#/components/schemas/ServiceRef'
        secretRef:
          $ref: '#/components/schemas/SecretRef'
          description: Reference of a Secret to used when checking repository
    ServiceRef:
      description: Lightweight reference of an existing Service
      required:
        - serviceId
        - name
        - version
      properties:
        serviceId:
          description: Unique reference of a Service
          type: string
        name:
          description: The Service name
          type: string
        version:
          description: The Service version
          type: string
    SecretRef:
      description: Lightweight reference for an existing Secret
      required:
        - secretId
        - name
      properties:
        secretId:
          description: Unique identifier or referenced Secret
          type: string
        name:
          description: Distinct name of the referenced Secret
          type: string
      example: |-
        {
            "secretId": "5be58fb51ed744d1b87481bd",
            "name": "Gogs internal"
        }
    Secret:
      description: A Secret allows grouping informations on how to access a restricted resource such as a repsoitory URL. Secrets are typically used by ImpoortJobs.
      required:
        - name
        - description
      properties:
        id:
          description: Unique identifier of Secret
          type: string
        name:
          description: Unique distinct name of Secret
          type: string
        username:
          type: string
        password:
          type: string
        token:
          type: string
        tokenHeader:
          type: string
        caCertPem:
          type: string
        description:
          description: Description of this Secret
          type: string
      example: |-
        {
            "id": "5be58fb51ed744d1b87481bd",
            "name": "Gogs internal",
            "description": "Gogs internal corporate repository",
            "username": "team",
            "password": "team",
            "caCertPem": "-----BEGIN CERTIFICATE-----\nMIIC6jCCAdKgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtvcGVu\nc2hpZnQtc2lnbmVyQDE1MzE5MTA5MDIwHhcNMTgwNzE4MTA0ODIyWhcNMjMwNzE3\nMTA0ODIzWjAmMSQwIgYDVQQDDBtvcGVuc2hpZnQtc2lnbmVyQDE1MzE5MTA5MDIw\nggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCyaP1jlpnm8WpfCSnUa8Qt\nhdUynOLLgElUtpWoW25wB9tO2ZmEj+fVsTyzEsW8+nfXXfRsBEzPm2ze9uEMTPTB\nAY0k7DbLZfjmF1lCckUvvh1rR/8hoPuXETjXUuOdtm7gRHTOxLQyH2Qi/q0DYJAn\nprKyRCLa35pRnykL6v4bHkqFnqDEho63i29XHhm2703moh4YCl1iYa2Rh6D44cjn\n8lBCq6o7zoZSmc/aBamRkQrfZYcolR8OUtDS4oEB0zMftmea2ycashsLEMB+Cq4r\n64NI2QM7qOxdTuXsDivHfLl7RTuWEOozGaJXoiPaGU/3d/KnY0gKJ2TC1KXt6Xjn\nAgMBAAGjIzAhMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MA0GCSqG\nSIb3DQEBCwUAA4IBAQCeUmxfUzw0VAFG6HvVYIsfvumiIvsSWmclGIZqNJyfMHFD\nMy6xzPRNNfWe5aumGTJsuIzuXfDRcdO7KmH1d2/5brkvWpxp6svVrYPvcoXjl4VN\nQR2mv5Di4KHfiiwvP3eeewjUZj+uREGqX2fcbJPHTPy32Kpb0H8Uy09BklhjC7QP\ngRAGexPhU1oBL/CoOwbHKcQ6dxs/y1SxzI8gXEtec4z62CroI13iT7U0UjSqFBE4\nKfrJombfz0d68781Z40ll+8my251ZNfbLBhQ3UHW0JnkBEQkE1aBorUoj2iakYvx\nA2qZh+8q2b8MwMb2YsQ0dlxKd6c4tN3lmMnO4bnd\n-----END CERTIFICATE-----"
        }
    ArtifactUpload:
      title: Root Type for ArtifactUpload
      description: |-
        Artifact (SOAP UI project, Postman collection or OpenAPI Specification) to be imported by Microcks.
        This structure represents a mime-multipart file upload (as specified here: https://swagger.io/docs/specification/describing-request-body/file-upload/)
      required:
        - file
      type: object
      properties:
        file:
          format: binary
          description: The artifact to upload
          type: string
    Counter:
      title: Root Type for Counter
      description: The root of the Counter type's schema.
      type: object
      properties:
        counter:
          format: int32
          description: Number of items in a resource collection
          type: integer
      example: |-
        {
            "counter": 12
        }
    TestCaseReturnDTO:
      required:
        - operationName
      properties:
        operationName:
          description: Name of related operation for this TestCase
          type: string
    TestReturn:
      description: TestReturn is used for wrapping the return code of a test step execution
      required:
        - code
        - elapsedTime
        - request
        - response
      properties:
        code:
          description: 'Return code for test (0 means Success, 1 means Failure)'
          type: integer
        elapsedTime:
          format: int64
          description: Elapsed time in milliseconds
          type: integer
        message:
          description: Error message if any
          type: string
        request:
          $ref: '#/components/schemas/Request'
          description: Request sent for this test
        response:
          $ref: '#/components/schemas/Response'
          description: Response returned for this test
    Request:
      description: A mock invocation or test request
      required:
        - name
        - operationId
      properties:
        id:
          description: Unique identifier of Request
          type: string
        name:
          description: Unique distinct name of this Request
          type: string
        content:
          description: Body content for this request
          type: string
        operationId:
          description: Identifier of Operation this Request is associated to
          type: string
        testCaseId:
          description: Unique identifier of TestCase this Request is attached (in case of a test)
          type: string
        headers:
          description: Headers for this Request
          type: array
          items:
            $ref: '#/components/schemas/Header'
    Response:
      description: A mock invocation or test response
      required:
        - operationId
        - name
      properties:
        operationId:
          description: Identifier of Operation this Response is associated to
          type: string
        content:
          description: Body content of this Response
          type: string
        id:
          description: Unique identifier of Response
          type: string
        name:
          description: Unique distinct name of this Response
          type: string
        testCaseId:
          description: Unique identifier of TestCase this Response is attached (in case of a test)
          type: string
        headers:
          description: Headers for this Response
          type: array
          items:
            $ref: '#/components/schemas/Header'
    Header:
      description: Transport headers for both Requests and Responses
      required:
        - name
        - values
      type: object
      properties:
        name:
          description: Unique distinct name of this Header
          type: string
        values:
          description: Values for this Header
          type: array
          items:
            type: string
    Operation:
      description: An Operation of a Service or API
      required:
        - name
        - method
      type: object
      properties:
        name:
          description: Unique name of this Operation within Service scope
          type: string
        method:
          description: Represents transport method
          type: string
        inputName:
          description: Name of input parameters in case of Xml based Service
          type: string
        outputName:
          description: Name of output parameters in case of Xml based Service
          type: string
        dispatcher:
          description: Dispatcher strategy used for mocks
          type: string
        dispatcherRules:
          description: DispactherRules used for mocks
          type: string
        defaultDelay:
          description: Default response time delay for mocks
          type: number
        resourcePaths:
          description: Paths the mocks endpoints are mapped on
          type: array
          items:
            type: string
    TestStepResult:
      description: TestStepResult is an entity embedded within TestCaseResult. They are created for each request associated with an operation / action of a microservice.
      required:
        - success
        - elapsedTome
        - requestName
      properties:
        success:
          description: Flag telling if test case is a success
          type: boolean
        elapsedTime:
          description: Elapsed time in milliseconds since the test step beginning
          type: number
        requestName:
          description: Name of request this test step is bound to
          type: string
        message:
          description: Error message that may be associated to this test step
          type: string
    KeycloakConfig:
      description: Representation of Keycloak / SSO configuration used by Microcks server
      required:
        - realm
        - auth-server-url
        - public-client
        - ssl-required
      type: object
      properties:
        realm:
          description: Authentication realm name
          type: string
        auth-server-url:
          description: SSO Server authentication url
          type: string
        public-client:
          description: Name of public-client that can be used for requesting OAuth token
          type: string
        ssl-required:
          description: SSL certificates requirements
          enum:
            - none
            - external
    RequestResponsePair:
      description: Request associated with corresponding Response
      required:
        - request
        - response
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request'
          description: The request part of the pair
        response:
          $ref: '#/components/schemas/Response'
          description: The Response part of the pair
    TestResult:
      description: 'Represents the result of a Service or API test run by Microcks. Tests are related to a service and made of multiple test cases corresponding to each operations / actions composing service. Tests are run against a specific endpoint named testedEndpoint. It holds global markers telling if test still ran, is a success, how many times is has taken and so on ...'
      required:
        - id
        - version
        - testNumber
        - testedEndpoint
        - serviceId
        - success
        - inProgress
        - runnerType
      properties:
        id:
          description: Unique identifier of TestResult
          type: string
        version:
          description: Revision number of this test
          type: number
        testNumber:
          description: Incremental number for tracking number of tests of a service
          type: number
        testedEndpoint:
          description: Endpoint used during test
          type: string
        serviceId:
          description: Unique identifier of service tested
          type: string
        elapsedTime:
          description: Elapsed time in milliseconds since test beginning
          type: number
        success:
          description: Flag telling if test is a success
          type: boolean
        inProgress:
          description: Flag telling is test is still in progress
          type: boolean
        runnerType:
          $ref: '#/components/schemas/TestRunnerType'
          description: Runner used for this test
        testCaseResults:
          description: TestCase results associated to this test
          type: array
          items:
            $ref: '#/components/schemas/TestCaseResult'
  securitySchemes:
    jwt-bearer:
      type: oauth2
      description: JWT Bearer acquired using OAuth 2 Authentication flow or Direct Access Grant
      flows:
        clientCredentials:
          tokenUrl: 'https://keycloak.example.com/auth/realms/microcks/protocol/openid-connect/token'
          refreshUrl: 'https://keycloak.example.com/auth/realms/microcks/protocol/openid-connect/token'
          scopes:
            user: manager
            admin: ''
security:
  - jwt-bearer: []
tags:
  - name: mock
    description: Operations related to API and Services mocks
  - name: test
    description: Operations related to API and Services tests
  - name: job
    description: Operations related to Jobs for discovering mocks and tests
  - name: config
    description: Operations related to configuration
